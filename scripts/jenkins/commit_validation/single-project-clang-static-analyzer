#!/bin/bash
#
# Common script run by various Jenkins builds to run Clang Static
# Analyzer on a project.

# Checks out all the gerrit changes with change-ids matching
# $GERRIT_PATCHSET_REVISION in an appropriate branch for the current
# manifest from Gerrit server GERRIT_HOST:GERRIT_PORT, and then
# builds GERRIT_PROJECT with the clang static analyzer.
#
# Triggered on patchset creation in a project's repo.

if [ -z "$GERRIT_HOST" ]; then
    echo "Error: Required environment variable 'GERRIT_HOST' not set."
    exit 1
fi
if [ -z "$GERRIT_PORT" ]; then
    echo "Error: Required environment variable 'GERRIT_PORT' not set."
    exit 2
fi
if [ -z "$GERRIT_PROJECT" ]; then
    echo "Error: Required environment variable 'GERRIT_PROJECT' not set."
    exit 3
fi
if [ -z "$GERRIT_PATCHSET_REVISION" ]; then
    echo "Error: Required environment variable 'GERRIT_PATCHSET_REVISION' not set."
    exit 4
fi
if [ -z "$GERRIT_REFSPEC" ]; then
    echo "Error: Required environment variable 'GERRIT_REFSPEC' not set."
    exit 5
fi
if [ -z "$GERRIT_CHANGE_ID" ]; then
    echo "Error: Required environment variable 'GERRIT_CHANGE_ID' not set."
    exit 6
fi

# Optional env vars - how many jobs to run in parallel by default?
PARALLELISM="${PARALLELISM:-8}"

SCAN_BUILD_PATH=$(which $SCAN_BUILD || which scan-build-3.6)

BASEDIR=$(cd $(dirname $BASH_SOURCE) && pwd)

set -e

function echo_cmd {
    echo \# "$@"
    "$@"
}

cat <<EOF

============================================
===    clean                             ===
============================================
EOF
echo_cmd make clean-xfd-hard
echo_cmd rm -fr install
echo_cmd rm -f build/CMakeCache.txt

cat <<EOF

============================================
===       update all projects with       ===
===          the same Change-Id          ===
============================================
EOF
${BASEDIR}/checkout_dependencies.py $GERRIT_PATCHSET_REVISION $GERRIT_CHANGE_ID $GERRIT_PROJECT $GERRIT_REFSPEC

cat <<EOF

============================================
===  Build ${GERRIT_PROJECT} under Clang Static Analyzer   ===
============================================
EOF
# If we've checked out a specific version of the TLM
# then we'll need to bring our new CMakeLists.txt in manually
echo_cmd cp -f tlm/CMakeLists.txt ./CMakeLists.txt
echo_cmd cp -f tlm/third-party-CMakeLists.txt ./third_party/CMakeLists.txt

# Can't use ccache with clang analyzer - see
# https://llvm.org/bugs/show_bug.cgi?id=25851
CMAKE_ARGS="${CMAKE_ARGS} -DCOUCHBASE_DISABLE_CCACHE=1"

REPORT_DIR="$(pwd)/clangScanBuildReports"
SCAN_BUILD_ARGS="--use-analyzer=$(which $CC) --use-c++=$(which $CXX) --use-cc=$(which $CC) -o ${REPORT_DIR}"

# We only want to build the Gerrit project under test,
# as we only want issues which are related to that project,
# and there doesn't appear to be a way to cull the results to a specific
# pattern / sub-directory.
# Therefore run cmake to generate all the makefiles, then just
# run make in the specific sub-directory.
mkdir -p build
cd build
echo_cmd $SCAN_BUILD_PATH ${SCAN_BUILD_ARGS} \
         cmake .. ${CMAKE_ARGS}

# The CMake configure step leaves an analyzer output run which
# confuses the Jenkins scan-build plugin. Clean out the directory
# before starting the actual build so we end up with just one report.
echo_cmd rm -fr ${REPORT_DIR}/*

echo_cmd $SCAN_BUILD_PATH ${SCAN_BUILD_ARGS} \
         make -C ${GERRIT_PROJECT} -j${PARALLELISM}
