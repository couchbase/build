#!/bin/bash
#
# Common script run by various Jenkins builds.
#
# Builds Couchbase and then runs Valgrind against all the unit tests
# in the specified project.

if [ -z "$PROJECT" ]; then
    echo "Error: Required environment variable 'PROJECT' not set."
    exit 3
fi

# Optional env vars - how many jobs to run in parallel by default?
PARALLELISM="${PARALLELISM:-8}"

# Set default TEST_PARALLELISM to 4 - many of our tests are actually
# multi-threaded (unlike the compiler) and hence running 8 tests in
# parallel (each with multiple threads) can overload the CV machines
# and cause test timeouts.
TEST_PARALLELISM="${TEST_PARALLELISM:-4}"

# Per-test timout.
TIMEOUT="${TIMEOUT:-4000}"

BASEDIR=$(cd $(dirname $BASH_SOURCE) && pwd)

source ~jenkins/.bash_profile
set -e

# CCACHE is good - use it if available.
export PATH=/usr/lib/ccache:$PATH

function echo_cmd {
    echo \# "$@"
    "$@"
}

cat <<EOF

============================================
===    environment                       ===
============================================
EOF
ulimit -a
echo ""
env | grep -iv password | grep -iv passwd | sort

cat <<EOF

============================================
===    clean                             ===
============================================
EOF
echo_cmd make clean-xfd-hard
echo_cmd rm -fr install

# Zero ccache stats, so we can measure how much space this build is
# consuming.
echo_cmd ccache -z

# Wipe out any core files left from a previous run.
echo_cmd rm -f /tmp/core.*

cat <<EOF

============================================
===               Build                  ===
============================================
EOF
echo_cmd make -j${PARALLELISM}

echo_cmd ccache -s

cat <<EOF

============================================
===    Run unit tests under Valgrind     ===
============================================
EOF
pushd build/${PROJECT} 2>&1 > /dev/null

# Clear out any previous runs' output files
echo_cmd rm -f memcheck.*.xml

echo_cmd make test ARGS="-j${TEST_PARALLELISM} --output-on-failure \
    --no-compress-output -D ExperimentalMemCheck --timeout ${TIMEOUT} \
    --exclude-regex ${VALGRIND_TESTS_EXCLUDE}" || true

# As part our test execution we run system commands which
# unfortunately have leaks themselves
# (e.g. /bin/sh). Therefore remove any results from such
# programs Jenkins parses the results so we don't include
# them.
echo_cmd ${BASEDIR}/remove_irrelevant_memcheck_results.py memcheck.*.xml

# Check for core files - if present then archive them and the
# executable they are from (for post-mortem) and fail the build.
echo "Checking for core dumps in /tmp/core.*"
echo_cmd cat /proc/sys/kernel/core_pattern
shopt -s nullglob
echo_cmd ${BASEDIR}/archive_core_files.sh archived_core_dumps /tmp/core.*
rm -f /tmp/core.*

popd 2>&1 > /dev/null
