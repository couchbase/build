#!/bin/bash
#
# Common script run by various Jenkins builds.
#
# Builds Couchbase with code coverage enabled and then all the unit
# tests in the specified project(s).

if [ -z "$PROJECTS" ]; then
    echo "Error: Required environment variable 'PROJECTS' not set."
    exit 3
fi

# Optional env vars - how many jobs to run in parallel by default?
PARALLELISM="${PARALLELISM:-8}"
TEST_PARALLELISM="${TEST_PARALLELISM:-${PARALLELISM}}"

# Set default BUILD_TARGET to 'everything' - which builds all shipping
# and non-shipping binaries (unit tests, etc)
BUILD_TARGET="${BUILD_TARGET:-everything}"

BASEDIR=$(cd $(dirname $BASH_SOURCE) && pwd)

source ~jenkins/.bash_profile
set -e

# CCACHE is good - use it if available.
export PATH=/usr/lib/ccache:$PATH

function echo_cmd {
    echo \# "$@"
    "$@"
}

cat <<EOF

============================================
===    environment                       ===
============================================
EOF
ulimit -a
echo ""
env | grep -iv password | grep -iv passwd | sort

cat <<EOF

============================================
===    clean                             ===
============================================
EOF
echo_cmd make clean-xfd-hard
echo_cmd rm -fr install
echo_cmd rm -f build/CMakeCache.txt

cat <<EOF

============================================
===               Build                  ===
============================================
EOF
# Build with Debug to disable compiler optimizations and get more
# accurate line coverage stats.
echo_cmd make -j${PARALLELISM} EXTRA_CMAKE_OPTIONS="-DCB_CODE_COVERAGE=ON -DCMAKE_BUILD_TYPE=Debug" ${BUILD_TARGET}

cat <<EOF

====================================================
===   Run unit tests with code coverage enabled  ===
====================================================
EOF
# 1. Clear all counters.
for proj in $PROJECTS
do
    pushd build/${proj} 2>&1 > /dev/null
    echo_cmd make ${proj}-coverage-zero-counters
    popd 2>&1 > /dev/null
done

# 2. Run tests and generate reports.
for proj in $PROJECTS
do
    pushd build/${proj} 2>&1 > /dev/null

    # -j${TEST_PARALLELISM} : Run tests in parallel.
    # -T Test   : Generate XML output file of test results.
    echo_cmd make test ARGS="-j${TEST_PARALLELISM} --output-on-failure --no-compress-output -T Test"

    # Generate code coverage report in XML format for Jenkins plugin.
    echo_cmd make ${proj}-coverage-report-xml

    popd 2>&1 > /dev/null
done

