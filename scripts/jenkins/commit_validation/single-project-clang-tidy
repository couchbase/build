#!/bin/bash
#
# Common script run by various Jenkins builds to check the diff
# for any code format changes as chosen by git-clang-format

# Checks out all the gerrit changes with change-ids matching
# $GERRIT_PATCHSET_REVISION in an appropriate branch for the current
# manifest from Gerrit server GERRIT_HOST:GERRIT_PORT, and then
# runs git-clang-format on the individual project.
#
# Triggered on patchset creation in a project's repo.

if [ -z "$GERRIT_HOST" ]; then
    echo "Error: Required environment variable 'GERRIT_HOST' not set."
    exit 1
fi
if [ -z "$GERRIT_PORT" ]; then
    echo "Error: Required environment variable 'GERRIT_PORT' not set."
    exit 2
fi
if [ -z "$GERRIT_PROJECT" ]; then
    echo "Error: Required environment variable 'GERRIT_PROJECT' not set."
    exit 3
fi
if [ -z "$GERRIT_PATCHSET_REVISION" ]; then
    echo "Error: Required environment variable 'GERRIT_PATCHSET_REVISION' not set."
    exit 4
fi
if [ -z "$GERRIT_REFSPEC" ]; then
    echo "Error: Required environment variable 'GERRIT_REFSPEC' not set."
    exit 5
fi
if [ -z "$GERRIT_CHANGE_ID" ]; then
    echo "Error: Required environment variable 'GERRIT_CHANGE_ID' not set."
    exit 6
fi

# Optional env vars - how many jobs to run in parallel by default?
PARALLELISM="${PARALLELISM:-8}"

BASEDIR=$(cd "$(dirname ${BASH_SOURCE})" && pwd)
BUILD_PATH="$(pwd)/build-kv_engine-clang-tidy"

set -e

function echo_cmd {
    echo \# "$@"
    "$@"
}

cat <<EOF

============================================
===    clean                             ===
============================================
EOF
echo_cmd rm -rf ${BUILD_PATH}

# Zero ccache stats, so we can measure how much space this build is
# consuming.
echo_cmd ccache -z

# Wipe out any core files left from a previous run.
echo_cmd rm -f /tmp/core.*

# Get patch_via_gerrit

PLATFORM=`uname | tr '[:upper:]' '[:lower:]'`
ARCH=`uname -m`
curl -o ${BASEDIR}/patch_via_gerrit http://packages.couchbase.com/patch_via_gerrit/patch_via_gerrit-${PLATFORM}-${ARCH}
chmod +x ${BASEDIR}/patch_via_gerrit

cat <<EOF

============================================
===       update all projects with       ===
===          the same Change-Id          ===
============================================
EOF
${BASEDIR}/patch_via_gerrit -d -c ${HOME}/.ssh/patch_via_gerrit.ini -g $GERRIT_CHANGE_ID -s $WORKSPACE -C

cat <<EOF

============================================
===  Check ${GERRIT_PROJECT} under       ===
===            Clang Tidy                ===
============================================
EOF
# If we've checked out a specific version of the TLM
# then we'll need to bring our new CMakeLists.txt in manually
echo_cmd cp -f tlm/CMakeLists.txt ./CMakeLists.txt
echo_cmd cp -f tlm/third-party-CMakeLists.txt ./third_party/CMakeLists.txt

echo_cmd mkdir -p $BUILD_PATH && cd $BUILD_PATH
echo_cmd cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ${CMAKE_EXTRA_ARGS} ..
echo_cmd make -j${PARALLELISM} generated_source_files
echo_cmd ccache -s
cd ..

if [[ -z "$CLANG_TIDY_BIN" ]]; then
  CLANG_TIDY_BIN=$(which clang-tidy)
fi
if [[ -z "$CLANG_TIDY_CONFIG" ]]; then
    CLANG_TIDY_CONFIG=""
fi

pushd ${GERRIT_PROJECT} 2>&1 > /dev/null
    echo_cmd git diff -U0 HEAD^ \
    | ${BASEDIR}/clang-tidy-diff.py -p1 -clang-tidy-binary="$CLANG_TIDY_BIN" \
                                    -fix -checks="$CLANG_TIDY_CHECKS" \
                                    -path="$BUILD_PATH" \
                                    -config="$CONFIG" > clang-tidy-output.log \
    | true

    if [[ ! -s clang-tidy-output.log ]]; then
        echo "clang-tidy did not suggest any changes"
        exit 0
    else
        echo "clang-tidy found the following problems:"
        cat clang-tidy-output.log
        GIT_DIFF=$(git diff)
        if [[ $GIT_DIFF ]]; then
          echo "clang-tidy suggested the following changes:"
          TIDY_DIFF="cat <<\"EOF\" | patch -p1\n${GIT_DIFF}\nEOF"
          # Escape any HTML symbols before outputtig to log (so users can
          # copy/paste the output from the Jenkins build status).
          escaped_diff=$(echo -e "$TIDY_DIFF" \
                             | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g')
          echo ""
          echo "$escaped_diff"
        fi
        exit 1
    fi
popd 2>&1 > /dev/null
