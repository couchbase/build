#!/bin/bash
#
# Script used to run tests using a periodic job.

if [ -z "$PROJECTS" ]; then
    echo "Error: Required environment variable 'PROJECTS' not set."
    exit 3
fi

# Optional env vars - how many jobs to run in parallel by default?
PARALLELISM="${PARALLELISM:-8}"
TEST_PARALLELISM="${TEST_PARALLELISM:-${PARALLELISM}}"

# Set default BUILD_TARGET to 'everything' - which builds all shipping
# and non-shipping binaries (unit tests, etc)
BUILD_TARGET="${BUILD_TARGET:-everything}"

BASEDIR=$(cd $(dirname $BASH_SOURCE) && pwd)

# Specifies the time budget per test.
TIME_BUDGET="${TIME_BUDGET:-10m}"
export FLAGS_fuzz_for="${TIME_BUDGET}"

# CCACHE is good - use it if available.
export PATH=/usr/lib/ccache:$PATH

function echo_cmd {
    echo \# "$@"
    "$@"
}

# We define two error handler functions - a fatal one used for the
# manditory parts of the build (i.e. actually building Couchbase), and
# a deferred one which 'remembers' error(s) have occured but lets the
# rest of the script run.
# This is to maximise the number of tests we run (even if earlier
# tests fail), so developers see as many problems in a single run as
# possible, but ensures that the script still exits with the correct
# error code.
last_error=0
error_count=0

function fatal_error_handler() {
    last_error=$?
    echo "Fatal error - aborting"
    exit $last_error
}
function deferred_error_handler() {
    last_error=$?
    (( error_count++ ))
}

# Initially install the fatal handler.
trap fatal_error_handler ERR

cat <<EOF

============================================
===    clean                             ===
============================================
EOF
echo_cmd make clean-xfd-hard
echo_cmd rm -fr install
echo_cmd rm -f build/CMakeCache.txt

# Zero ccache stats, so we can measure how much space this build is
# consuming.
echo_cmd ccache -z

# Wipe out any core files left from a previous run.
echo_cmd rm -f /tmp/core.*

cat <<EOF

============================================
===               Build                  ===
============================================
EOF
# If we've checked out a specific version of the TLM
# then we'll need to bring our new CMakeLists.txt in manually
echo_cmd cp -f tlm/CMakeLists.txt ./CMakeLists.txt
echo_cmd cp -f tlm/third-party-CMakeLists.txt ./third_party/CMakeLists.txt

CMAKE_ARGS="${CMAKE_ARGS} -DCB_ADDRESSSANITIZER=ON"

if [ -n "$ENABLE_LIBFUZZER_COMPATIBILITY_MODE" ]; then
   CMAKE_ARGS="${CMAKE_ARGS} -DFUZZTEST_COMPATIBILITY_MODE=libfuzzer"
else
   CMAKE_ARGS="${CMAKE_ARGS} -DFUZZTEST_FUZZING_MODE=ON"
fi

echo_cmd make -j${PARALLELISM} EXTRA_CMAKE_OPTIONS="${CMAKE_ARGS}" ${BUILD_TARGET}

echo_cmd ccache -s

# Mandatory steps complete, install the deferred error handler.
trap deferred_error_handler ERR

function make_test() {
    EXTRA_ARGS=$1

    # -j${TEST_PARALLELISM} : Run tests in parallel.
    # -T Test   : Generate XML output file of test results.
    echo_cmd make test ARGS="-j${TEST_PARALLELISM} --verbose --no-compress-output -T Test ${EXTRA_ARGS}"
}

BUILD_DIR="build/$GERRIT_PROJECT"

if [ -f ${BUILD_DIR}/Makefile ]
then
    cat <<EOF

============================================
===          Run unit tests              ===
============================================
EOF
    pushd ${BUILD_DIR} 2>&1 > /dev/null

    make_test "--exclude-regex ${TESTS_EXCLUDE:-a^} --tests-regex ${TESTS_INCLUDE:-.*}"

    popd 2>&1 > /dev/null
fi

exit $last_error
